name: CICD

on:
  # Trigger the workflow on push on master or pull request
  push:
    branches:
      - master
  pull_request:

jobs:
  eslint-backend:
    name: ESLint (Backend)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          cd backend
          npm install
          ./node_modules/.bin/eslint .

  eslint-frontend:
    name: ESLint (Frontend)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          cd frontend
          npm install --no-optional # --no-optional flag is set to fix this error: https://bit.ly/2VmFFcm
          ./node_modules/.bin/eslint .

  auto-lint-fixer:
    name: Run linters
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12

      # ESLint and Prettier must be in `package.json`
      - name: Install Node.js dependencies
        run: npm install

      - name: Run linters
        uses: samuelmeuli/lint-action@v1
        with:
          github_token: ${{ secrets.github_token }}
          eslint: true

  test-backend:
    name: Unit tests (Backend)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          cd backend
          npm install
          npm test

  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          docker-compose build
          docker build -t minitwit-simulator-integration-test ./tests/simulator-integration-test -f ./tests/simulator-integration-test/Dockerfile
          docker-compose up -d --force-recreate
          docker run --network=minitwit-network minitwit-simulator-integration-test

  simulator-tests:
    name: Simulator tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          docker-compose build
          docker build -t minitwit-simulator ./tests/simulator -f ./tests/simulator/Dockerfile
          docker-compose up -d --force-recreate
          sleep 10
          docker run --network=minitwit-network minitwit-simulator

  build-deploy:
    name: Build and deploy
    if: github.ref == 'refs/heads/master'
    needs: [eslint-backend, eslint-frontend, integration-tests, simulator-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: "0"

      - name: Push backend to Dockerhub
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: dagandersen/backend
          username: ${{ secrets.DOCKER_DAG_TEST_USER }}
          password: ${{ secrets.DOCKER_DAG_TEST_PASSWORD }}
          workdir: backend

      - name: Push frontend to Dockerhub
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: dagandersen/frontend
          username: ${{ secrets.DOCKER_DAG_TEST_USER }}
          password: ${{ secrets.DOCKER_DAG_TEST_PASSWORD }}
          workdir: frontend

      - name: Push grafana to Dockerhub
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: dagandersen/grafana
          username: ${{ secrets.DOCKER_DAG_TEST_USER }}
          password: ${{ secrets.DOCKER_DAG_TEST_PASSWORD }}
          workdir: grafana

      - name: Copy files via scp
        uses: appleboy/scp-action@master
        env:
          HOST: ${{ secrets.server_ip }}
          USERNAME: ${{ secrets.server_user }}
          KEY: ${{ secrets.CI_private_key }}
        with:
          source: "."
          target: "/vagrant/"

      - name: Docker-Compose Pull and Up
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.server_ip }}
          USERNAME: ${{ secrets.server_user }}
          KEY: ${{ secrets.CI_private_key }}
          script: |
            cd /vagrant/
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull 
            docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

      - name: Bump version and push tag
        id: tagger
        uses: anothrNick/github-tag-action@1.17.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
          WITH_V: true
          DEFAULT_BUMP: patch

      - name: Get Commit Message
        id: commit_message
        run: echo "::set-output name=message::$(git log --no-merges -1 --oneline)"

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ steps.tagger.outputs.new_tag }}
          release_name: Release ${{ steps.tagger.outputs.new_tag }}
          body: |
            This release was automatically generated by workflow: ${{ github.workflow }}
            Changes:
            ${{ steps.commit_message.outputs.message }}
          draft: false
          prerelease: false
